var Precision: int = 100000000

-- 正在进行中的任务信息
type TaskInfoProgress = {
    task_id: string,
    task_launcher: string,
    task_bonus: int,
    miner_array: Array<string>,
    mining_result: Map<string>
}

-- 历史任务信息
type TaskInfoHistory = {
    task_id: string,
    task_launcher: string,
    task_bonus: int,
    miner_array: Array<string>,
    mining_result: Map<string>,
    bonus_history: Map<int>
}

type Storage = {
	name: string,
	--允许调用者数组 (发起调用的用户地址)
	allowedAddrCaller: Array<string>,
	--允许调用者数组 (直接调用的合约地址)
	allowedConCaller: Array<string>,
	--进行中的任务信息
	currentTasks: Map<string>,
	--已结束的任务信息
	historyTasks: Map<string>,
	--所有账户的余额信息
    balance: Map<int>
}

var M = Contract<Storage>()

function M:init()
	self.storage.name = "task_publish_platform"
	self.storage.allowedAddrCaller = []
    self.storage.allowedConCaller = []
    self.storage.currentTasks = {}
    self.storage.historyTasks = {}
    self.storage.balance = {}
end

-- 判断是否为普通管理员
let function isGeneralAdmin()
	let adminArray = get_general_admin()
	for k,v in pairs(adminArray) do
		if caller_address == v then
			return true
		end
	end
	return false
end

-- 判断是否已经存在于allowedAddrCaller中
let function isAddressAllowed(self: table, addr: string)
	for k,v in pairs(totable(self.storage.allowedAddrCaller)) do
		if addr == v then
			return true
		end
	end
	return false
end

-- 判断是否已经存在于allowedConCaller中
let function isContractAllowed(self: table, addr: string)
	let in_flag = false
	for k,v in pairs(totable(self.storage.allowedConCaller)) do
		if addr == v then
			return true
		end
	end
	return false
end

-- 提供GeneralAdmin调用
-- 添加到allowedAddrCaller中
function M:addAddrCallerAllowed(addr: string)
	let admin_flag = isGeneralAdmin()
	if admin_flag == false then
		return error("not general admin, and has no authority")
	end

	let valid_flag = is_valid_address(addr)
	if valid_flag == false then
		return error("invalid address")
	end
	
	let in_flag = isAddressAllowed(self, addr)
	if in_flag == true then
		return error("has in allowedAddrCaller already")
	end 
	
	self.storage.allowedAddrCaller[#self.storage.allowedAddrCaller+1] = addr
end

-- 提供GeneralAdmin调用
-- 添加到allowedConCaller中
function M:addConCallerAllowed(addr: string)
	let admin_flag = isGeneralAdmin()
	if admin_flag == false then
		return error("not general admin, and has no authority")
	end

	let valid_flag = is_valid_contract_address(addr)
	if valid_flag == false then
		return error("invalid contract address")
	end
	
	let in_flag = isContractAllowed(self, addr)
	if in_flag == true then
		return error("has in allowedConCaller already")
	end 
	
	self.storage.allowedConCaller[#self.storage.allowedConCaller+1] = addr
end

-- 提供GeneralAdmin调用
-- 从allowedAddrCaller中移除
function M:delAddrCallerAllowed(addr: string)
	let admin_flag = isGeneralAdmin()
	if admin_flag == false then
		return error("not general admin, and has no authority")
	end

	let valid_flag = is_valid_address(addr)
	if valid_flag == false then
		return error("invalid address")
	end
	
	let in_flag = isAddressAllowed(self, addr)
	if in_flag == false then
		return error("not in allowedAddrCaller")
	end 
	
	table.remove(self.storage.allowedAddrCaller, addr)
end

-- 提供GeneralAdmin调用
-- 从allowedConCaller中移除
function M:delConCallerAllowed(addr: string)
	let admin_flag = isGeneralAdmin()
	if admin_flag == false then
		return error("not general admin, and has no authority")
	end

	let valid_flag = is_valid_contract_address(addr)
	if valid_flag == false then
		return error("invalid contract address")
	end
	
	let in_flag = isContractAllowed(self, addr)
	if in_flag == false then
		return error("not in allowedConCaller")
	end 
	
	table.remove(self.storage.allowedConCaller, addr)
end

-- 提供合约内所有用户调用
-- 充值
function M:on_deposit(amount: int)
    var user_balance: int = self.storage.balance[caller_address]
    if user_balance == nil then
        self.storage.balance[caller_address] = amount
    else
        self.storage.balance[caller_address] = user_balance + amount
    end
end

-- 提供合约内所有用户调用
-- 取钱
function M:withdraw(amount_str:string)
    var withdraw_balance:number = tonumber(amount_str)
    var withdraw_balance_precision:int = tointeger(withdraw_balance * Precision) 

    var user_balance: int = self.storage.balance[caller_address]
    if user_balance == nil then
        return error("no balance")
    elseif user_balance < withdraw_balance_precision then
        return error("not enough balance to withdraw")
    else
        self.storage.balance[caller_address] = user_balance - withdraw_balance_precision
        transfer_from_contract_to_address(caller_address, "CDC", withdraw_balance_precision)
    end
end

-- 提供GeneralAdmin调用
-- 由GeneralAdmin代替商家发布任务 参数格式  平台任务ID|商家操作员地址|商家合约地址|任务奖金|矿池地址1,矿池地址2,矿池地址3...
function M:publishTask(args:string)
	let parsed = string.split(args, '|')
	if (not parsed) or (#parsed ~= 5) then
		return error("args format error")
    end
    
    let task_id = tostring(parsed[1])
    let merchant_operator = tostring(parsed[2])
    let merchant_contract = tostring(parsed[3])
    let task_bonus = tointeger(tonumber(parsed[4]) * Precision)
	let mining_pools_str = tostring(parsed[5])

    let mining_pool_array = string.split(mining_pools_str, ',')
    if (not mining_pool_array) then
        return error("mining_pools_str format error")
    end
	
	-- 判断商家操作员地址是否合法
	var valid_flag: bool = is_valid_address(merchant_operator)
	if valid_flag == false then
		return error("invalid merchant operator address")
	end

	-- 判断商家合约地址是否合法
	valid_flag = is_valid_contract_address(merchant_contract)
	if valid_flag == false then
		return error("invalid merchant contract address")
	end
	
	-- 调用者必须是GeneralAdmin
	let admin_flag = isGeneralAdmin()
	if admin_flag == false then
		return error("not general admin, and has no authority")
	end

	-- task_id已经被使用过
	var current_task_info: string = self.storage.currentTasks[task_id] 
	if current_task_info ~= nil then
		return error("task_id is in process")
	end
	
	var history_task_info: string = self.storage.historyTasks[task_id]
	if history_task_info ~= nil then
		return error("task_id is finished")
	end

	var user_balance: int = self.storage.balance[merchant_operator]
	if user_balance == nil then
		return error("no balance")
	elseif user_balance < task_bonus then
		return error("not enough balance for task_bonus")
	else
		self.storage.balance[merchant_operator] = user_balance - task_bonus
	end

	var task_info = TaskInfoProgress()
	-- 来自于中心化平台的任务ID
	task_info.task_id = task_id
	task_info.task_launcher = merchant_operator
	task_info.task_bonus = task_bonus
	task_info.miner_array = []
	for k,v in pairs(totable(mining_pool_array)) do
		valid_flag = is_valid_contract_address(tostring(v))
		if valid_flag == false then
			return error("invalid mining-pool contract address")
		end
		task_info.miner_array[#task_info.miner_array+1] = tostring(v)
	end
	task_info.mining_result = {}

	self.storage.currentTasks[task_id] = json.dumps(task_info)
end

-- 提供GeneralAdmin调用
-- 由GeneralAdmin代替矿工提交挖矿结果  参数格式  平台任务ID|矿池操作员地址|矿池合约地址|挖矿结果ID
function M:submitMiningResult(args:string)
	let parsed = string.split(args, '|')
	if (not parsed) or (#parsed ~= 4) then
		return error("args format error")
    end

    let task_id = tostring(parsed[1])
    let miningpool_operator = tostring(parsed[2])
	let miningpool_contract = tostring(parsed[3])
	let mining_result = tostring(parsed[4])

	-- 判断矿池操作员地址是否合法
	var valid_flag: bool = is_valid_address(miningpool_operator)
	if valid_flag == false then
		return error("invalid miningpool operator address")
	end

	-- 判断矿池合约地址是否合法
	valid_flag = is_valid_contract_address(miningpool_contract)
	if valid_flag == false then
		return error("invalid miningpool contract address")
	end

	-- 调用者必须是GeneralAdmin
	let admin_flag = isGeneralAdmin()
	if admin_flag == false then
		return error("not general admin, and has no authority")
	end

	-- task_id出现在history_task_info中
	var history_task_info_str: string = self.storage.historyTasks[task_id]
	if history_task_info_str ~= nil then
		return error("task_id is in history_task_info")
	end

	-- task_id不存在于current_task_info中
	var current_task_info_str: string = self.storage.currentTasks[task_id] 
	if current_task_info_str == nil then
		return error("task_id is not in current_task_info")
	end

	var current_task_info: TaskInfoProgress = totable(json.loads(current_task_info_str))
	if current_task_info == nil then
		return error("assert: nil current_task_info")
	end

	var tmp_mining_result: string = current_task_info.mining_result[miningpool_contract]
	if tmp_mining_result ~= nil then
		return error("mining pool has already submited mining result before")
	end
	current_task_info.mining_result[miningpool_contract] = mining_result

	-- 判断是否为指定挖矿矿池提交挖矿结果
	var in_miner_array: bool = false
	for k,v in pairs(totable(current_task_info.miner_array)) do
		if v == miningpool_contract then
			in_miner_array = true
		end
	end

	if in_miner_array ~= true then
		return error("invalid mining result")
	end

	self.storage.currentTasks[task_id] = json.dumps(current_task_info)

end

-- 提供GeneralAdmin调用
-- 由GeneralAdmin代替商家结束挖矿任务 参数格式  平台任务ID|商家操作员地址|商家合约地址|矿池操作员地址1:激励金额1,矿池操作员地址2:激励金额2...
function M:finishTask(args:string)
	let parsed = string.split(args, '|')
	if (not parsed) or (#parsed ~= 4) then
		return error("args format error")
	end
	
	let task_id = tostring(parsed[1])
    let merchant_operator = tostring(parsed[2])
	let merchant_contract = tostring(parsed[3])
	let bonus_info_str = tostring(parsed[4])

	let bonus_info_array = string.split(bonus_info_str, ',')
	if (not bonus_info_array) then
		return error("args format error")
	end

	var bonus_info_map: Map<int> = {}
	var total_bonus: int = 0
	for k,v in pairs(totable(bonus_info_array)) do
		let parsed = string.split(tostring(v), ':')
		if (not parsed) or (#parsed ~= 2) then
			return error("args format error")
		end
		bonus_info_map[tostring(parsed[1])] = tointeger(tonumber(tostring(parsed[2])))
		total_bonus = total_bonus + tointeger(tonumber(tostring(parsed[2])))
	end 

	-- 判断商家操作员地址是否合法
	var valid_flag: bool = is_valid_address(merchant_operator)
	if valid_flag == false then
		return error("invalid merchant operator address")
	end

	-- 判断商家合约地址是否合法
	valid_flag = is_valid_contract_address(merchant_contract)
	if valid_flag == false then
		return error("invalid merchant contract address")
	end
	
	-- 调用者必须是GeneralAdmin
	let admin_flag = isGeneralAdmin()
	if admin_flag == false then
		return error("not general admin, and has no authority")
	end

	-- task_id出现在history_task_info中
	var history_task_info_str: string = self.storage.historyTasks[task_id]
	if history_task_info_str ~= nil then
		return error("task_id is in history_task_info")
	end
	
	-- task_id不存在于current_task_info中
	var current_task_info_str: string = self.storage.currentTasks[task_id] 
	if current_task_info_str == nil then
		return error("task_id is not in current_task_info")
	end

	var current_task_info: TaskInfoProgress = totable(json.loads(current_task_info_str))
	if current_task_info == nil then
		return error("assert: nil current_task_info")
	end

	if current_task_info.task_bonus ~= total_bonus then
		return error("invalid total bonus value")
	end

	var task_info_his = TaskInfoHistory()
	task_info_his.task_id = current_task_info.task_id
	task_info_his.task_launcher = current_task_info.task_launcher
	task_info_his.task_bonus = current_task_info.task_bonus
	task_info_his.miner_array = current_task_info.miner_array
	task_info_his.mining_result = current_task_info.mining_result
	task_info_his.bonus_history = bonus_info_map

	self.storage.historyTasks[task_id] = json.dumps(task_info_his)
	self.storage.currentTasks[task_id] = nil

	for k,v in pairs(totable(bonus_info_map)) do
		let ret = transfer_from_contract_to_address(tostring(k), "CDC", tointeger(tonumber(tostring(v))))
		if ret ~= 0 then
			return error("transfer_from_contract_to_address fail")
		end
	end
end

-- 查询合约名
offline function M:getContractName()
	let ret = self.storage.name
	return ret
end

-- 查询allowedAddrCaller
offline function M:getallowedAddrCaller()
	let ret = tojsonstring(self.storage.allowedAddrCaller)
	return ret
end

-- 查询allowedConCaller
offline function M:getallowedConCaller()
	let ret = tojsonstring(self.storage.allowedConCaller)
	return ret
end

-- 查询所有用户balance信息
offline function M:getBalances()
	let ret = tojsonstring(self.storage.balance)
	return ret
end

-- 查询某个用户balance信息
offline function M:getBalance(addr: string)
	var balance:int = self.storage.balance[addr]
	if balance == nil then
		balance = 0
	end
	let ret = tojsonstring(balance)
	return ret
end

-- 查询currentTasks中所有的的task_id
offline function M:getCurrentTaskids()
	var currentTaskids: Array<string> = []
	for k,v in pairs(totable(self.storage.currentTasks)) do
		currentTaskids[#currentTaskids] = tostring(k)
	end
	let ret = tojsonstring(currentTaskids)
	return ret
end

-- 查询historyTasks中所有的的task_id
offline function M:getHistoryTaskids()
	var historyTaskids: Array<string> = []
	for k,v in pairs(totable(self.storage.historyTasks)) do
		historyTaskids[#historyTaskids] = tostring(k)
	end
	let ret = tojsonstring(historyTaskids)
	return ret
end

-- 从currentTasks中根据task_id查询
offline function M:getCurrentTask(task_id: string)
	var ret: string = tostring(self.storage.currentTasks[task_id])
	if ret == nil then
		ret = ""
	end
	return ret
end

-- 从historyTasks中根据task_id查询
offline function M:getHistoryTask(task_id: string)
	var ret: string = tostring(self.storage.historyTasks[task_id])
	if ret == nil then
		ret = ""
	end
	return ret
end

return M

