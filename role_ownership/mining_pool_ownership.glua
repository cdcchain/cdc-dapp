-- pool ownership contract
-- support event:  SubmitShareProposal

type State = 'NOT_EXIST' | 'IN_PROGRESS' | 'FINISHED' 

-- type Property: used to record properties of the pool
type  Property = {

    register: string           -- record the user who registered this contract
    shareHolders: Map<int>     -- record pool share holders & the share (in 100 percent mode) it holds 
    admins: Array<string>      -- record pool admins
    operators: Array<string>   -- record pool operators

    isShareInit: bool          -- record whether init the share
    proposalSharePercent: int  -- record the share percent to pass a proposal
    proposalState: string      -- record change share proposal state
    proposalInfo: Map<int>     -- recode change share proposal info
    agreeInfo: Array<string>   -- record the info of agreeing the proposal

}



var PoolContract = Contract<Property>()

var INVALID_ARGS = "invalid args!"


function  PoolContract:init()

    self.storage.register = caller_address    
    self.storage.shareHolders = {}
    self.storage.admins = {}
    self.storage.operators = {}

    self.storage.isShareInit = false
    self.storage.proposalSharePercent = 50
    self.storage.proposalState = 'NOT_EXIST'
    proposalInfo = {}
    agreeInfo = {}


end


-- parse init_share args 
-- ex.: parse a,b,c,d format string to [a,b,c,d]
let function parse_init_share_args(arg: string)

    if not arg then
        return error(INVALID_ARGS)
    end

    let parsed = string.split(arg, ',')
    if (not parsed) or ((#parsed) % 2 ~= 0) then
        return error(INVALID_ARGS)
    end

    -- judge whether total shares is 100 and address is valid
    var total_share int = 0
    for i = 1, #res, 2 do
        is_valid_address(parsed[i])
        total_share = total_share + tointeger(parsed[i+1])
    end

    if total_share ~= 100 then
        return error(INVALID_ARGS.." total share is not 100%!")
    end


    return parsed

end

-- check whehter share have been inited
let function is_share_inited()
    
    if self.storage.isShareInit ~= false then
        return error("holder shares have been inited!")
    end

end


-- check whehter data operator on chain
let function is_general_admin(self: table)

    let res = verify_general_admin(caller_address)

    if res ~= 0 then
        return error("you are not general admin, can't call this function!")
    end

end

-- set holder's shares, can only call once
-- params: string 
   ex.: "name1, share1, name2, share2"
function PoolContract:init_share(arg: string)

    is_share_inited()
    is_general_admin(self)
    
    -- check args
    if not arg then
        return error(INVALID_ARGS)
    end

    let res = parse_init_share_args(arg)

    for i = 1, #res, 2 do
        self.storage.admin[i] = res[i]
        self.storage.shareHolders[res[i]] = tointeger(res[i+1])
    end

end


-- get the state of proposal
let function get_proposal_state()
    
    return self.storage.proposalState

end


-- submit a proposal of changing holder shares
function  PoolContract:submit_share_proposal(arg: string)

    if 'IN_PROGRESS' == get_proposal_state() then
        return error("Another proposal have been in progress!")
    end

    -- initialize proposal related
    self.storage.agreeInfo = {}
    self.storage.proposalInfo = {}

    let res = parse_init_share_args(arg)
    for i = 1, #res, 2 do
        self.storage.proposalInfo[res[i]] = tointeger(res[i+1])
    end

    emit SubmitShareProposal("submit a change share proposal")

end




-- get the share percent to pass a proposal
function PoolContract:get_share_percent_of_proposal(_: string)

    return self.storage.proposalSharePercent

end

-- set the share percent to pass a proposal
function PoolContract:set_share_percent_of_proposal(arg: string)

    if 'IN_PROGRESS' == get_proposal_state() then
        return error("Proposal have been in progress, cannot set now!")
    end

    is_general_admin()

    self.storage.proposalSharePercent = tointeger(arg)
    
end

-- change holder shares
let function change_share()

    if self.storage.shareHolders == {} or self.storage.proposalInfo == {} then
        return error("share info something wrong!")
    end

    for k, v in pairs(self.storage.proposalInfo) do
        self.storage.shareHolders[k] = v
    end

end


-- whehter agree the change share proposal
function PoolContract:agree_share_proposal(_: string)

    if 'IN_PROGRESS' ~= get_proposal_state() then
        return error("No proposal in progress!")
    end

    self.storage.agreeInfo[caller_address] = 1


    var total_agree_share int = 0
    for i, v in ipairs(self.storage.agreeInfo) do
        total_agree_share = total_agree_share + shareHolders[v]
    end


    if total_agree_share > self:get_share_percent_of_proposal("") then
        change_share()
    end

end













