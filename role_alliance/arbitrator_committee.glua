-- arbitrator committee contract
-- support event:  SubmitProposal

type State = 'NOT_EXIST' | 'IN_PROGRESS'

-- type committee member: used to record applied committee member state
type CommitteeMember = {
    applyer: string,                             -- record who produce this apply
    value: int,                                  -- record member value                                        
    isAgreed: bool                               -- record whether agree apply
}

-- type Property: used to record properties of the committee
type  Property = {

    register: string,                               -- record the user who registered this contract
    chair: string,                                  -- record committee chair 
    isChairInit: bool,                              -- record whether init the chair man


    proposalPercent: int,                           -- record percent of agreed number to pass the proposal
    proposalState: string,                          -- record proposal state
    proposalInfo: string,                           -- record proposal info
    agreeProposalInfo: Array<string>,               -- record the info of agreeing the proposal
    disagreeProposalInfo: Array<string>,            -- record the info of disagreeing the proposal

    
    committeeFee: int ,                             -- record committee fee
    appliedCommitteeMember: Map<CommitteeMember>,   -- record apply committee member
    committeeMember: Map<CommitteeMember>,          -- record committee member


    invitingArbitrator: Map<stirng>                 -- record the inviting arbitrator info
    tmpinvitedArbitrator: string                    -- temp record the invited Arbitrator

}



var ArbitratorCommitteeContract = Contract<Property>()

var INVALID_ARGS = "invalid args!"


function  ArbitratorCommitteeContract:init()

    self.storage.register = caller_address    
    self.storage.chair = ""
    self.sotrage.isChairInit = false

    self.storage.proposalPercent = 50
    self.storage.proposalState = 'NOT_EXIST'
    self.sotrage.proposalInfo = ""
    self.sotrage.agreeProposalInfo = []
    self.storage.disagreeProposalInfo = []

    self.storage.committeeFee = 1000000
    self.storage.appliedCommitteeMember = {}
    self.storage.committeeMember = {}

    self.storage.invitingArbitrator = {}
    self.storage.tmpinvitedArbitrator = ""

end


-- check whether chair have been inited
let function is_chair_inited(self: table)
    
    if self.storage.isChairInit ~= false then
        return error("chair have been inited!")
    end

end


-- check whether general admin on chain
let function is_general_admin()

    let res = verify_general_admin(caller_address)

    if res ~= 0 then
        return error("you are not general admin, can't call this function!")
    end

end


-- check whether committee member 
let function is_committee_member(self: table, name: string)

    for k, v in pairs(totable(self.storage.committeeMember)) do
        if  v.applyer == name then
            return true
        end
    end

    return false

end


-- set chair man, can only call once
function ArbitratorCommitteeContract:init_chair(chair_man: string)

    is_chair_inited(self)
    is_general_admin()
    
    -- check args
    if (not chair_man) or (chair_man == '') then
        return error(INVALID_ARGS)
    end

    self.storage.chair = chair_man    
    self.storage.isChairInit = true

end


-- get the state of proposal
let function helper_get_proposal_state(self: table)
    
    return self.storage.proposalState

end

-- get the proposal info 
let function helper_get_proposal_info(self: table)

    return self.storage.proposalInfo

end


-- submit a proposal of changing chair man 
function  ArbitratorCommitteeContract:submit_proposal(name: string)

    if not is_committee_member(self, caller_address) then
        return error("you are not committee member, can't call this function!")
    end

    if 'IN_PROGRESS' == helper_get_proposal_state(self) then
        return error("Another proposal have been in progress!")
    end

    if ('' == name) or (not is_valid_address(name)) then
        return error(INVALID_ARGS)
    end 

    -- initialize proposal related
    self.storage.agreeProposalInfo = []
    self.storage.disagreeProposalInfo = []


    self.storage.proposalInfo = tostring(name)
    self.storage.proposalState = 'IN_PROGRESS'
    emit SubmitProposal("submit a change chair man proposal")

end




-- get the percent to pass a  proposal
function ArbitratorCommitteeContract:get_percent_of_proposal(_: string)

    return self.storage.proposalPercent

end

-- set the percent to pass a proposal
function ArbitratorCommitteeContract:set_percent_of_proposal(arg: string)

    is_general_admin()

    if 'IN_PROGRESS' == helper_get_proposal_state(self) then
        return error("Proposal have been in progress, cannot set now!")
    end    

    self.storage.proposalPercent = tointeger(arg)
    
end

-- change chair man
let function change_chair(self: table)

    if self.storage.chair == ''  then 
        return error("chair man info something wrong!")
    end 

    self.storage.chair = self.sotrage.proposalInfo

end


-- whether agree the change share proposal
function ArbitratorCommitteeContract:agree_proposal(_: string)

    if not is_committee_member(self, caller_address) then
        return error("you are not committee man, can't call this function!")
    end

    if 'IN_PROGRESS' ~= helper_get_proposal_state(self) then
        return error("No proposal in progress!")
    end

    let current_agree_len = #self.storage.agreeProposalInfo
    self.storage.agreeProposalInfo[current_agree_len + 1] = caller_address


    let current_percent: number = get_percent_of_proposal() / 100
    if current_agree_len > tointeger(#self.storage.committeeMember * current_percent ) then
        change_chair(self)
        self.storage.proposalState = 'NOT_EXIST'
        self.storage.proposalInfo = ''
    end

end


let function is_applied(self: table, contract_id: string)

    for k, v in pairs(totable(self.storage.committeeMember)) do
        if  k == contract_id then
            return true
        end
    end

    return false

end

-- store the applied committee member(only allow contract call it)
function ArbitratorCommitteeContract:store_apply(contract_id: string, operator_addr: string, member_value: int)

    let prev_contract = get_prev_call_frame_contract_address()

    if prev_contract == "" or prev_contract == nil then
        return error("only allow call this function in contract!")
    end

    if is_applied(self, contract_id) then
        return error("member already applied!")
    else
        var member: CommitteeMember = {applyer = operator_addr, value = member_value, isAgreed = false}
        self.storage.appliedCommitteeMember[contract_id] = member
    end

end

-- agree committee member apply
function ArbitratorCommitteeContract:agree_apply(contract_id: string)

    if self.storage.chair ~= caller_address then
        return error("you are not chair man, can't call this function!")
    end

    self.storage.appliedCommitteeMember[contract_id].isAgreed = true

end

let function is_agreed(self: table, operator_addr: string)
    
    for k, v in pairs(totable(self.storage.appliedCommitteeMember)) do
        if (operator_addr == v.applyer) and (v.isAgreed == true) then
            return true
        end
    end

    return false

end

-- on_deposit: accept committee fee
function ArbitratorCommitteeContract:on_deposit(amount: int)

    if amount < self.storage.committeeFee then
        return error("committee fee not enough!")
    end

    if not is_agreed(caller_address) then
        return error("committee chair man not agree the apply yet!")
    end

    var apply_key: string = ""
    for k, v in pairs(totable(self.storage.appliedCommitteeMember)) do
        if caller_address == v.applyer then
            apply_key = k
            let len = #self.storage.committeeMember
            self.storage.committeeMember[len + 1] = k
        end
    end
    self.storage.appliedCommitteeMember[apply_key] = nil

    let remain: int =  amount - self.storage.committeeFee
    if remain > 0 then
        let res: int = transfer_from_contract_to_address(caller_address, "CDC", remain)
        if res ~= 0 then
            return error("something is wrong when transfer back extra committee fee!")
        end
    end   

end



let function is_inviting(self: table, contract_id: string)

    for k, v in pairs(totable(self.storage.invitingArbitrator)) do
        if k == contract_id then
            return true
        end
    end

    return false

end

function ArbitratorCommitteeContract:store_inviting_info(contract_id: string, name: string)

    let prev_contract = get_prev_call_frame_contract_address()

    if prev_contract == "" or prev_contract == nil then
        return error("only allow call this function in contract!")
    end

    if not is_committee_member(self, name) then
        return error("inviting arbitrator is not committee member!")
    end

    if is_inviting(self, contract_id) then
        return error("member already inviting!")
    else
        self.storage.invitingArbitrator[contract_id] = name
    end

end


function ArbitratorCommitteeContract:agree_invitation(contract_id: string, name: string)

    if self.storage.chair ~= caller_address then
        return error("you are not chair man, can't call this function!")
    end

    let c = import_contract_from_address(contract_id)
    if (not c) or (not c.store_arbitrator) then
        return error("contract or funciton in contract not exist!")
    end

    var current_contract_id: string = get_current_contract_address()
    let member_value: int = 0
    for k, v in pairs(totable(self.storage.appliedCommitteeMember)) do
        if name == v.applyer then
            member_value = v.value
        end
    end
    c:store_arbitrator(current_contract_id, name, value)

    if  self.storage.invitingArbitrator[contract_id] == nil then
        return error("inviting info something wrong!")
    else
        self.storage.invitingArbitrator[contract_id] == nil
    end

end




offline function ArbitratorCommitteeContract:get_committee_member_info(_: string)
    let res = tojsonstring(self.storage.committeeMember)
    return res
end



offline function ArbitratorCommitteeContract:get_chair_man(_: string)
    let res = self.storage.chair
    return res
end


offline function ArbitratorCommitteeContract:get_proposal_state(_: string)
    let res = helper_get_proposal_state(self)
    return res
end

offline function ArbitratorCommitteeContract:get_proposal_info(_: string)
    let res = helper_get_proposal_info(self)
    return res
end

offline function ArbitratorCommitteeContract:get_applied_member_info(contract_id: string)
    let res = tojsonstring(self.storage.appliedCommitteeMember[contract_id])
    return res
end

offline function ArbitratorCommitteeContract:get_committee_member(_: string)
    let res = tojsonstring(self.storage.committeeMember)
    return res
end

return ArbitratorCommitteeContract











