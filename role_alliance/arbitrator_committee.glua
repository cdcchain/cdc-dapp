-- arbitrator committee contract
-- support event:  SubmitProposal

type State = 'NOT_EXIST' | 'IN_PROGRESS'

-- type committee member: used to record applied committee member state
type CommitteeMember = {
    applyer: string,                             -- record who produce this apply
    value: int,                                  -- record member value                                        
    isPaid: bool                                 -- record whether fee paid
}

-- type Property: used to record properties of the committee
type  Property = {

    register: string,                               -- record the user who registered this contract
    chair: string,                                  -- record committee chair 
    isChairInit: bool,                              -- record whether init the chair man


    proposalPercent: int,                           -- record percent of agreed number to pass the proposal
    proposalState: string,                          -- record proposal state
    proposalInfo: string,                           -- record proposal info
    agreeProposalInfo: Array<string>,               -- record the info of agreeing the proposal
    disagreeProposalInfo: Array<string>,            -- record the info of disagreeing the proposal

    
    committeeFee: int ,                             -- record committee fee
    committeeMember: Map<string>                    -- record committee member

}



var ArbitratorCommitteeContract = Contract<Property>()

var INVALID_ARGS = "invalid args!"
var ChainPrecision: int = 100000000

function  ArbitratorCommitteeContract:init()

    self.storage.register = caller_address    
    self.storage.chair = ""
    self.storage.isChairInit = false

    self.storage.proposalPercent = 50
    self.storage.proposalState = 'NOT_EXIST'
    self.storage.proposalInfo = ""
    self.storage.agreeProposalInfo = []
    self.storage.disagreeProposalInfo = []

    self.storage.committeeFee = tointeger(100 * ChainPrecision)
    self.storage.committeeMember = {}

end


-- parse args
let function parse_args(arg: string)

    if not arg then 
        return error(INVALID_ARGS)
    end

    let parsed = string.split(arg, ',')

    if not parsed then
        return error(INVALID_ARGS)
    end

    return parsed    
    
end



-- check whether chair have been inited
let function is_chair_inited(self: table)
    
    if self.storage.isChairInit ~= false then
        return error("chair have been inited!")
    end

end


-- check whether general admin on chain
let function is_general_admin()

    let res = verify_general_admin(caller_address)

    if res ~= 0 then
        return error("you are not general admin, can't call this function!")
    end

end


-- check whether committee member 
let function is_committee_member(self: table, name: string)

    for k, v in pairs(totable(self.storage.committeeMember)) do
        let member: CommitteeMember = totable(json.loads(tostring(v)))
        if  member.applyer == name then
            return true
        end
    end

    return false

end


-- set chair man, can only call once
function ArbitratorCommitteeContract:init_chair(chair_man: string)

    is_chair_inited(self)
    is_general_admin()
    
    -- check args
    if (not chair_man) or (chair_man == '') then
        return error(INVALID_ARGS)
    end

    self.storage.chair = chair_man    
    self.storage.isChairInit = true

end


-- get the state of proposal
let function helper_get_proposal_state(self: table)
    
    return self.storage.proposalState

end

-- get the proposal info 
let function helper_get_proposal_info(self: table)

    return self.storage.proposalInfo

end


-- submit a proposal of changing chair man 
function  ArbitratorCommitteeContract:submit_proposal(name: string)

    if not is_committee_member(self, caller_address) then
        return error("you are not committee member, can't call this function!")
    end

    if 'IN_PROGRESS' == helper_get_proposal_state(self) then
        return error("Another proposal have been in progress!")
    end

    if ('' == name) or (not is_valid_address(name)) then
        return error(INVALID_ARGS)
    end 

    -- initialize proposal related
    self.storage.agreeProposalInfo = []
    self.storage.disagreeProposalInfo = []


    self.storage.proposalInfo = tostring(name)
    self.storage.proposalState = 'IN_PROGRESS'
    emit SubmitProposal("submit a change chair man proposal")

end




-- get the percent to pass a  proposal
function ArbitratorCommitteeContract:get_percent_of_proposal(_: string)

    return self.storage.proposalPercent

end

-- set the percent to pass a proposal
function ArbitratorCommitteeContract:set_percent_of_proposal(arg: string)

    is_general_admin()

    if 'IN_PROGRESS' == helper_get_proposal_state(self) then
        return error("Proposal have been in progress, cannot set now!")
    end    

    self.storage.proposalPercent = tointeger(arg)
    
end

-- change chair man
let function change_chair(self: table)

    if self.storage.chair == ''  then 
        return error("chair man info something wrong!")
    end 

    self.storage.chair = self.sotrage.proposalInfo

end


-- whether agree the change share proposal
function ArbitratorCommitteeContract:agree_proposal(_: string)

    if not is_committee_member(self, caller_address) then
        return error("you are not committee man, can't call this function!")
    end

    if 'IN_PROGRESS' ~= helper_get_proposal_state(self) then
        return error("No proposal in progress!")
    end

    let current_agree_len = #self.storage.agreeProposalInfo
    self.storage.agreeProposalInfo[current_agree_len + 1] = caller_address


    var current_percent: number = tonumber(ArbitratorCommitteeContract:get_percent_of_proposal(""))
    current_percent = current_percent / 100
    if current_agree_len > tointeger(#self.storage.committeeMember * current_percent ) then
        change_chair(self)
        self.storage.proposalState = 'NOT_EXIST'
        self.storage.proposalInfo = ''
    end

end


-- agree committee member apply
function ArbitratorCommitteeContract:agree_apply(arg: string)

    if self.storage.chair ~= caller_address then
        return error("you are not chair man, can't call this function!")
    end

    let parsed: Array<string> = totable(parse_args(arg))
    let contract_id: string = parsed[1]

    var member: CommitteeMember = {applyer = parsed[2], value = tointeger(parsed[3]), isPaid = false}
    let member_json_str: string = tojsonstring(member)

    self.storage.committeeMember[contract_id] = member_json_str

end

let function is_agreed(self: table, operator_addr: string)
    
    for k, v in pairs(totable(self.storage.committeeMember)) do
        let member: CommitteeMember = totable(json.loads(tostring(v)))
        if (operator_addr == member.applyer) and (member.isPaid == false) then
            return true
        end
    end

    return false

end

-- on_deposit: accept committee fee
function ArbitratorCommitteeContract:on_deposit(amount: string)

    if tointeger(amount) ~= self.storage.committeeFee then
        return error("committee fee not correct!")
    end

    if not is_agreed(self, caller_address) then
        return error("committee chair man not agree the apply yet!")
    end

    var apply_key: string = ""
    for k, v in pairs(totable(self.storage.committeeMember)) do
        let member: CommitteeMember = totable(json.loads(tostring(v)))
        if caller_address == member.applyer then
            apply_key = tostring(k)
            member.isPaid = true
            let member_json_str: string = tojsonstring(member)
            self.storage.committeeMember[apply_key] = member_json_str
        end
    end

end


-- withdraw from contract balance
function ArbitratorCommitteeContract:withdraw_from_contract(amount: string)

    if self.storage.chair ~= caller_address then
        return error("you are not chair man, can't call this function!")
    end

    let pay_amount:int = tointeger(tointeger(amount) * ChainPrecision)
    let res: int = transfer_from_contract_to_address(caller_address, "CDC", pay_amount)
    if res ~= 0 then
        return error("something is wrong when withdraw from contract!")
    end

end


offline function ArbitratorCommitteeContract:get_chair_man(_: string)
    let res = self.storage.chair
    return res
end

offline function ArbitratorCommitteeContract:get_proposal_state(_: string)
    let res = helper_get_proposal_state(self)
    return res
end

offline function ArbitratorCommitteeContract:get_proposal_info(_: string)
    let res = helper_get_proposal_info(self)
    return res
end

offline function ArbitratorCommitteeContract:get_committee_member(_: string)
    let res = tojsonstring(self.storage.committeeMember)
    return res
end

return ArbitratorCommitteeContract











